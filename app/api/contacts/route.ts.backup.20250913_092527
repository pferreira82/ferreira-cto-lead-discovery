import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

// Demo data for when frontend requests it
const DEMO_CONTACTS = [
  {
    id: 'demo-1',
    first_name: 'Sarah',
    last_name: 'Chen',
    email: 'sarah.chen@nexustherapeutics.com',
    phone: '+1-555-0123',
    title: 'Chief Executive Officer',
    role_category: 'Founder',
    linkedin_url: 'https://linkedin.com/in/sarah-chen',
    contact_status: 'not_contacted',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    companies: {
      name: 'Nexus Therapeutics',
      industry: 'Biotechnology',
      funding_stage: 'Series A'
    }
  },
  {
    id: 'demo-2',
    first_name: 'Michael',
    last_name: 'Rodriguez',
    email: 'mrodriguez@bioventures.com',
    phone: '+1-555-0456',
    title: 'Partner',
    role_category: 'VC',
    linkedin_url: 'https://linkedin.com/in/michael-rodriguez',
    contact_status: 'contacted',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    companies: {
      name: 'BioVentures Capital',
      industry: 'Venture Capital',
      funding_stage: 'N/A'
    }
  },
  {
    id: 'demo-3',
    first_name: 'Dr. Emily',
    last_name: 'Watson',
    email: 'emily.watson@genomicsinc.com',
    phone: '+1-555-0789',
    title: 'Chief Scientific Officer',
    role_category: 'Executive',
    linkedin_url: 'https://linkedin.com/in/emily-watson-phd',
    contact_status: 'responded',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    companies: {
      name: 'Genomics Inc.',
      industry: 'Biotechnology',
      funding_stage: 'Series B'
    }
  }
]

// Initialize Supabase client
function getSupabaseClient() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

  if (!supabaseUrl || !supabaseKey) {
    return null
  }

  return createClient(supabaseUrl, supabaseKey)
}

// GET - Fetch contacts
export async function GET(request: NextRequest) {
  try {
    console.log('üîç API: Fetching contacts...')
    
    // Check if frontend is requesting demo mode via header
    const demoMode = request.headers.get('X-Demo-Mode') === 'true'
    console.log('üìä API: Demo mode requested:', demoMode)
    
    if (demoMode) {
      console.log('üìä API: Returning demo data as requested by frontend')
      return NextResponse.json({
        success: true,
        contacts: DEMO_CONTACTS,
        source: 'demo',
        count: DEMO_CONTACTS.length
      })
    }

    // Production mode - use Supabase
    const supabase = getSupabaseClient()
    if (!supabase) {
      console.error('‚ùå API: Supabase not configured')
      return NextResponse.json({
        success: false,
        error: 'Database not configured. Please set up Supabase credentials.',
        contacts: [],
        source: 'error',
        count: 0
      }, { status: 500 })
    }

    // Fetch contacts from Supabase
    const { data: contacts, error } = await supabase
      .from('contacts')
      .select(`
        *,
        companies:company_id (
          name,
          industry,
          funding_stage
        )
      `)
      .order('created_at', { ascending: false })

    if (error) {
      console.error('‚ùå API: Supabase query failed:', error)
      return NextResponse.json({
        success: false,
        error: `Database error: ${error.message}`,
        contacts: [],
        source: 'error',
        count: 0
      }, { status: 500 })
    }

    console.log(`‚úÖ API: Fetched ${contacts?.length || 0} contacts from Supabase`)
    return NextResponse.json({
      success: true,
      contacts: contacts || [],
      source: 'supabase',
      count: contacts?.length || 0
    })

  } catch (error) {
    console.error('‚ùå API: Unexpected error:', error)
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      contacts: [],
      source: 'error',
      count: 0
    }, { status: 500 })
  }
}

// POST - Add new contact
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    console.log('‚ûï API: Adding contact:', body)

    // Validate required fields
    if (!body.first_name || !body.last_name) {
      return NextResponse.json({
        success: false,
        error: 'First name and last name are required'
      }, { status: 400 })
    }

    // Check if frontend is requesting demo mode via header
    const demoMode = request.headers.get('X-Demo-Mode') === 'true'
    console.log('üìä API: Demo mode requested for add:', demoMode)
    
    if (demoMode) {
      console.log('üìä API: Simulating contact addition in demo mode')
      
      // Create demo contact
      const newContact = {
        id: `demo-${Date.now()}`,
        first_name: body.first_name,
        last_name: body.last_name,
        email: body.email || null,
        phone: body.phone || null,
        title: body.title || null,
        role_category: body.role_category || null,
        linkedin_url: body.linkedin_url || null,
        contact_status: 'not_contacted',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        companies: body.companies || null
      }

      return NextResponse.json({
        success: true,
        contact: newContact,
        source: 'demo'
      })
    }

    // Production mode - use Supabase
    const supabase = getSupabaseClient()
    if (!supabase) {
      console.error('‚ùå API: Supabase not configured')
      return NextResponse.json({
        success: false,
        error: 'Database not configured. Please set up Supabase credentials.'
      }, { status: 500 })
    }

    // Handle company creation/linking
    let companyId = null
    if (body.companies && body.companies.name) {
      // First, try to find existing company
      const { data: existingCompany } = await supabase
        .from('companies')
        .select('id')
        .eq('name', body.companies.name)
        .single()

      if (existingCompany) {
        companyId = existingCompany.id
      } else {
        // Create new company
        const { data: newCompany, error: companyError } = await supabase
          .from('companies')
          .insert({
            name: body.companies.name,
            industry: body.companies.industry,
            funding_stage: body.companies.funding_stage
          })
          .select('id')
          .single()

        if (companyError) {
          console.error('‚ùå API: Company creation failed:', companyError)
          return NextResponse.json({
            success: false,
            error: `Company creation failed: ${companyError.message}`
          }, { status: 500 })
        } else {
          companyId = newCompany.id
        }
      }
    }

    // Create contact
    const contactData = {
      first_name: body.first_name,
      last_name: body.last_name,
      email: body.email,
      phone: body.phone,
      title: body.title,
      role_category: body.role_category,
      linkedin_url: body.linkedin_url,
      company_id: companyId,
      contact_status: 'not_contacted'
    }

    const { data: newContact, error: contactError } = await supabase
      .from('contacts')
      .insert(contactData)
      .select(`
        *,
        companies:company_id (
          name,
          industry,
          funding_stage
        )
      `)
      .single()

    if (contactError) {
      console.error('‚ùå API: Contact creation failed:', contactError)
      return NextResponse.json({
        success: false,
        error: `Contact creation failed: ${contactError.message}`
      }, { status: 500 })
    }

    console.log('‚úÖ API: Contact created in Supabase:', newContact)
    return NextResponse.json({
      success: true,
      contact: newContact,
      source: 'supabase'
    })

  } catch (error) {
    console.error('‚ùå API: Unexpected error in POST:', error)
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
